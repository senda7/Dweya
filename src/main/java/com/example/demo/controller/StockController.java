package com.example.demo.controller;

import com.example.demo.model.Medpharmacie;
import com.example.demo.model.Notification;
import com.example.demo.model.Utilisateur;
import com.example.demo.repository.MedpharmacieRepository;
import com.example.demo.repository.UtilisateurRepository;
import com.example.demo.service.NotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/pharmacie/{pharmacieId}/gestion-stock")
public class StockController {

    @Autowired
    private MedpharmacieRepository medpharmacieRepository;

    @Autowired
    private UtilisateurRepository utilisateurRepository;

    @Autowired
    private NotificationService notificationService;

    // M√©thode utilitaire pour convertir Date en LocalDate
    private LocalDate convertToLocalDate(Date date) {
        if (date == null) {
            return null;
        }
        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    // Page principale de gestion du stock
    @GetMapping
    public String gestionStock(@PathVariable Long pharmacieId, Model model) {
        try {
            System.out.println("=== CHARGEMENT STOCK PHARMACIE " + pharmacieId + " ===");

            // R√©cup√©rer l'utilisateur
            Utilisateur utilisateur = utilisateurRepository.findById(pharmacieId).orElse(null);
            if (utilisateur != null) {
                model.addAttribute("utilisateur", utilisateur);
                System.out.println("‚úÖ Utilisateur trouv√©: " + utilisateur.getNomPharmacie());
            } else {
                System.out.println("‚ö†Ô∏è Utilisateur non trouv√© pour ID: " + pharmacieId);
                model.addAttribute("utilisateur", null);
            }

            // R√©cup√©rer tous les m√©dicaments de la pharmacie
            List<Medpharmacie> medicaments = medpharmacieRepository.findByPharmacieId(pharmacieId);
            model.addAttribute("medicaments", medicaments);
            model.addAttribute("pharmacieId", pharmacieId);

            System.out.println("üì¶ M√©dicaments trouv√©s: " + medicaments.size());

            // V√©rifier les ruptures de stock et cr√©er des notifications
            notificationService.checkAllMedicamentsForStockAlerts(medicaments, pharmacieId);

            // R√©cup√©rer les notifications non lues
            List<Notification> notifications = notificationService.getUnreadNotifications(pharmacieId);
            model.addAttribute("notifications", notifications);
            model.addAttribute("unreadCount", notifications != null ? notifications.size() : 0);

            System.out.println("üîî Notifications non lues: " + (notifications != null ? notifications.size() : 0));
            System.out.println("‚úÖ Page de gestion de stock charg√©e avec succ√®s");

            return "pharmacie/gestion-stock";

        } catch (Exception e) {
            System.out.println("‚ùå ERREUR lors du chargement du stock: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors du chargement du stock: " + e.getMessage());
            return "error";
        }
    }

    // Afficher le formulaire d'ajout
    @GetMapping("/ajouter")
    public String showAjouterForm(@PathVariable Long pharmacieId, Model model) {
        try {
            // R√©cup√©rer l'utilisateur pour l'affichage
            Utilisateur utilisateur = utilisateurRepository.findById(pharmacieId).orElse(null);
            if (utilisateur != null) {
                model.addAttribute("utilisateur", utilisateur);
            }

            model.addAttribute("medicament", new Medpharmacie());
            model.addAttribute("pharmacieId", pharmacieId);

            System.out.println("üìã Affichage formulaire d'ajout pour pharmacie: " + pharmacieId);
            return "pharmacie/ajouter";

        } catch (Exception e) {
            System.out.println("‚ùå Erreur formulaire ajout: " + e.getMessage());
            model.addAttribute("error", "Erreur lors du chargement du formulaire");
            return "error";
        }
    }

    // Ajouter un nouveau m√©dicament
    @PostMapping("/ajouter")
    public String ajouterMedicament(
            @PathVariable Long pharmacieId,
            @RequestParam String nom,
            @RequestParam String description,
            @RequestParam Double prix,
            @RequestParam Integer quantite,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date datePeremption,
            @RequestParam(required = false) Boolean ordonnanceRequise,
            @RequestParam(required = false) MultipartFile photo,RedirectAttributes redirectAttributes,
            Model model) {

        try {
            System.out.println("=== AJOUT M√âDICAMENT: " + nom + " ===");
            System.out.println("üìä Quantit√©: " + quantite + ", Prix: " + prix);

            if (ordonnanceRequise == null) {
                ordonnanceRequise = false;
            }

            Medpharmacie medicament = new Medpharmacie();
            medicament.setNom(nom);
            medicament.setDescription(description);
            medicament.setPrix(prix);
            medicament.setQuantite(quantite);
            medicament.setDatePeremption(convertToLocalDate(datePeremption));
            medicament.setOrdonnanceRequise(ordonnanceRequise);
            medicament.setPharmacieId(pharmacieId);

            // Gestion de la photo
            if (photo != null && !photo.isEmpty()) {
                String photoData = Base64.getEncoder().encodeToString(photo.getBytes());
                medicament.setPhotoData(photoData);
                System.out.println("üì∏ Photo ajout√©e");
            }

            medpharmacieRepository.save(medicament);
            System.out.println("üíæ M√©dicament sauvegard√© en base");

            // V√©rifier si le stock est √©puis√©
            if (quantite == 0) {
                System.out.println("‚ö†Ô∏è M√©dicament ajout√© avec quantit√© 0, cr√©ation alerte...");
                notificationService.createStockAlert(medicament, pharmacieId);
            } else {
                System.out.println("‚úÖ M√©dicament ajout√© avec succ√®s");
            }

            redirectAttributes.addFlashAttribute("successMessage", "M√©dicament ajout√© avec succ√®s");
            return "redirect:/pharmacie/" + pharmacieId + "/gestion-stock";

        } catch (IOException e) {
            System.out.println("‚ùå Erreur traitement image: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors du traitement de l'image: " + e.getMessage());
            return "error";
        } catch (Exception e) {
            System.out.println("‚ùå Erreur ajout m√©dicament: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors de l'ajout du m√©dicament: " + e.getMessage());
            return "error";
        }
    }

    // Afficher le formulaire de modification
    @GetMapping("/modifier/{medicamentId}")
    public String showModifierForm(@PathVariable Long pharmacieId, @PathVariable Long medicamentId, Model model) {
        try {
            // R√©cup√©rer l'utilisateur
            Utilisateur utilisateur = utilisateurRepository.findById(pharmacieId).orElse(null);
            if (utilisateur != null) {
                model.addAttribute("utilisateur", utilisateur);
            }

            Optional<Medpharmacie> medicamentOpt = medpharmacieRepository.findByIdAndPharmacieId(medicamentId, pharmacieId);
            if (medicamentOpt.isEmpty()) {
                System.out.println("‚ùå M√©dicament non trouv√©: " + medicamentId);
                model.addAttribute("error", "M√©dicament non trouv√©");
                return "error";
            }

            model.addAttribute("medicament", medicamentOpt.get());
            model.addAttribute("pharmacieId", pharmacieId);

            System.out.println("üìã Affichage formulaire modification m√©dicament: " + medicamentId);
            return "pharmacie/modifier";

        } catch (Exception e) {
            System.out.println("‚ùå Erreur formulaire modification: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors du chargement du m√©dicament: " + e.getMessage());
            return "error";
        }
    }

    // Modifier un m√©dicament existant
    @PostMapping("/modifier/{medicamentId}")
    public String modifierMedicament(
            @PathVariable Long pharmacieId,
            @PathVariable Long medicamentId,
            @RequestParam String nom,
            @RequestParam String description,
            @RequestParam Double prix,
            @RequestParam Integer quantite,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date datePeremption,
            @RequestParam(required = false) Boolean ordonnanceRequise,
            @RequestParam(required = false) MultipartFile photo,RedirectAttributes redirectAttributes,
            Model model) {

        try {
            System.out.println("=== MODIFICATION M√âDICAMENT ID: " + medicamentId + " ===");

            if (ordonnanceRequise == null) {
                ordonnanceRequise = false;
            }

            Optional<Medpharmacie> medicamentOpt = medpharmacieRepository.findByIdAndPharmacieId(medicamentId, pharmacieId);
            if (medicamentOpt.isEmpty()) {
                System.out.println("‚ùå M√©dicament non trouv√©: " + medicamentId);
                model.addAttribute("error", "M√©dicament non trouv√©");
                return "error";
            }

            Medpharmacie medicament = medicamentOpt.get();

            // Sauvegarder l'ancienne quantit√©
            Integer ancienneQuantite = medicament.getQuantite();
            System.out.println("üìä Ancienne quantit√©: " + ancienneQuantite + ", Nouvelle quantit√©: " + quantite);

            medicament.setNom(nom);
            medicament.setDescription(description);
            medicament.setPrix(prix);
            medicament.setQuantite(quantite);
            medicament.setDatePeremption(convertToLocalDate(datePeremption));
            medicament.setOrdonnanceRequise(ordonnanceRequise);

            // Gestion de la photo
            if (photo != null && !photo.isEmpty()) {
                String photoData = Base64.getEncoder().encodeToString(photo.getBytes());
                medicament.setPhotoData(photoData);
                System.out.println("üì∏ Photo modifi√©e");
            }

            medpharmacieRepository.save(medicament);
            System.out.println("üíæ M√©dicament modifi√© avec succ√®s");

            // V√©rifier les alertes de stock - seulement si passage de >0 √† 0
            if (ancienneQuantite != null && ancienneQuantite > 0 && quantite == 0) {
                System.out.println("‚ö†Ô∏è Rupture de stock d√©tect√©e, cr√©ation alerte...");
                notificationService.createStockAlert(medicament, pharmacieId);
            }

            redirectAttributes.addFlashAttribute("successMessage", "M√©dicament modifi√© avec succ√®s");
            return "redirect:/pharmacie/" + pharmacieId + "/gestion-stock";

        } catch (IOException e) {
            System.out.println("‚ùå Erreur traitement image: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors du traitement de l'image: " + e.getMessage());
            return "error";
        } catch (Exception e) {
            System.out.println("‚ùå Erreur modification m√©dicament: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors de la modification du m√©dicament: " + e.getMessage());
            return "error";
        }
    }

    // Supprimer un m√©dicament
    @PostMapping("/supprimer/{medicamentId}")
    public String supprimerMedicament(@PathVariable Long pharmacieId, @PathVariable Long medicamentId,RedirectAttributes redirectAttributes, Model model) {
        try {
            System.out.println("=== SUPPRESSION M√âDICAMENT ID: " + medicamentId + " ===");

            if (!medpharmacieRepository.existsByIdAndPharmacieId(medicamentId, pharmacieId)) {
                System.out.println("‚ùå M√©dicament non trouv√©: " + medicamentId);
                model.addAttribute("error", "M√©dicament non trouv√©");
                return "error";
            }

            medpharmacieRepository.deleteById(medicamentId);
            System.out.println("‚úÖ M√©dicament supprim√© avec succ√®s");

            redirectAttributes.addFlashAttribute("successMessage", "M√©dicament supprim√© avec succ√®s");
            return "redirect:/pharmacie/" + pharmacieId + "/gestion-stock";

        } catch (Exception e) {
            System.out.println("‚ùå Erreur suppression m√©dicament: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors de la suppression du m√©dicament: " + e.getMessage());
            return "error";
        }
    }

    // V√©rifier les stocks √©puis√©s manuellement
    @GetMapping("/verifier-stocks")
    public String verifierStocks(@PathVariable Long pharmacieId,  RedirectAttributes redirectAttributes,Model model) {
        try {
            System.out.println("=== V√âRIFICATION MANUELLE DES STOCKS ===");

            List<Medpharmacie> medicaments = medpharmacieRepository.findByPharmacieId(pharmacieId);
            System.out.println("üîç V√©rification de " + medicaments.size() + " m√©dicaments");

            // Utiliser la m√©thode de v√©rification group√©e
            notificationService.checkAllMedicamentsForStockAlerts(medicaments, pharmacieId);

            // Compter les m√©dicaments en rupture
            long stocksEpuises = medicaments.stream()
                    .filter(med -> med.getQuantite() != null && med.getQuantite() == 0)
                    .count();

            System.out.println("‚úÖ V√©rification termin√©e: " + stocksEpuises + " m√©dicaments en rupture");

            redirectAttributes.addFlashAttribute("infoMessage", "V√©rification des stocks termin√©e");
            return "redirect:/pharmacie/" + pharmacieId + "/gestion-stock";

        } catch (Exception e) {
            System.out.println("‚ùå Erreur v√©rification stocks: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors de la v√©rification des stocks: " + e.getMessage());
            return "error";
        }
    }

    // Rechercher des m√©dicaments
    @GetMapping("/rechercher")
    public String rechercherMedicaments(@PathVariable Long pharmacieId, @RequestParam String nom, Model model) {
        try {
            System.out.println("üîç RECHERCHE: " + nom);

            // R√©cup√©rer l'utilisateur
            Utilisateur utilisateur = utilisateurRepository.findById(pharmacieId).orElse(null);
            if (utilisateur != null) {
                model.addAttribute("utilisateur", utilisateur);
            }

            List<Medpharmacie> medicaments = medpharmacieRepository.findByPharmacieIdAndNomContainingIgnoreCase(pharmacieId, nom);
            model.addAttribute("medicaments", medicaments);
            model.addAttribute("termerecherche", nom);
            model.addAttribute("pharmacieId", pharmacieId);

            System.out.println("‚úÖ " + medicaments.size() + " r√©sultat(s) trouv√©(s)");

            return "pharmacie/gestion-stock";

        } catch (Exception e) {
            System.out.println("‚ùå Erreur recherche: " + e.getMessage());
            e.printStackTrace();
            model.addAttribute("error", "Erreur lors de la recherche: " + e.getMessage());
            return "error";
        }
    }

    // API pour obtenir le nombre de notifications non lues
    @GetMapping("/api/notifications/count")
    @ResponseBody
    public int getNotificationCount(@PathVariable Long pharmacieId) {
        try {
            int count = notificationService.getUnreadCount(pharmacieId);
            System.out.println("üìä API Notification count: " + count);
            return count;
        } catch (Exception e) {
            System.out.println("‚ùå Erreur API notifications: " + e.getMessage());
            return 0;
        }
    }

    // TEST METHOD - Pour v√©rifier que le contr√¥leur fonctionne
    @GetMapping("/test")
    @ResponseBody
    public String test(@PathVariable Long pharmacieId) {
        return "‚úÖ StockController fonctionnel pour pharmacie ID: " + pharmacieId;
    }
}